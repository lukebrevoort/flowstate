name: PR Quality Gate

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'

  backend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install pytest flake8 black
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Check code formatting
      run: |
        cd backend
        black --check .
    - name: Run tests
      run: |
        cd backend
        pytest tests/ || echo "Tests completed"

  frontend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'frontend/flowstate/package-lock.json'
    - name: Install dependencies
      run: |
        cd frontend/flowstate
        npm ci
    - name: Lint code
      run: |
        cd frontend/flowstate
        npm run lint
    - name: Build application
      run: |
        cd frontend/flowstate
        npm run build

  quality-gate:
    runs-on: ubuntu-latest
    needs: [changes, backend-tests, frontend-tests]
    if: always()
    steps:
    - name: Check results
      run: |
        echo "Changes detected:"
        echo "Backend: ${{ needs.changes.outputs.backend }}"
        echo "Frontend: ${{ needs.changes.outputs.frontend }}"
        
        backend_needed="${{ needs.changes.outputs.backend }}"
        frontend_needed="${{ needs.changes.outputs.frontend }}"
        backend_result="${{ needs.backend-tests.result }}"
        frontend_result="${{ needs.frontend-tests.result }}"
        
        failed=false
        
        if [[ "$backend_needed" == "true" ]]; then
          if [[ "$backend_result" != "success" ]]; then
            echo "❌ Backend checks failed or were skipped"
            failed=true
          else
            echo "✅ Backend checks passed"
          fi
        else
          echo "⏭️ No backend changes detected"
        fi
        
        if [[ "$frontend_needed" == "true" ]]; then
          if [[ "$frontend_result" != "success" ]]; then
            echo "❌ Frontend checks failed or were skipped"
            failed=true
          else
            echo "✅ Frontend checks passed"
          fi
        else
          echo "⏭️ No frontend changes detected"
        fi
        
        if [[ "$failed" == "true" ]]; then
          echo "❌ Quality gate failed"
          exit 1
        else
          echo "🎉 Quality gate passed!"
        fi