name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flowstate_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install pytest pytest-cov pytest-asyncio httpx

    - name: Set up test environment
      working-directory: ./backend
      env:
        ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flowstate_test
        SECRET_KEY: test-secret-key-for-ci
        ANTHROPIC_API_KEY: test-key
        OPENAI_API_KEY: test-key
      run: |
        export ENV=test
        export DATABASE_URL=sqlite:///./test.db
        export SECRET_KEY=test-secret-key-for-ci

    - name: Run backend tests
      working-directory: ./backend
      env:
        ENV: test
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key-for-ci
        ANTHROPIC_API_KEY: test-key
        OPENAI_API_KEY: test-key
      run: |
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/flowstate/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./frontend/flowstate
      run: |
        npm ci --legacy-peer-deps

    - name: Run frontend linting
      working-directory: ./frontend/flowstate
      run: |
        npm run lint

    - name: Run frontend tests
      working-directory: ./frontend/flowstate
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_LANGGRAPH_API_URL: http://localhost:9876
        CI: true
      run: |
        npm test -- --watchAll=false --coverage --passWithNoTests

    - name: Build frontend
      working-directory: ./frontend/flowstate
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_LANGGRAPH_API_URL: http://localhost:9876
      run: |
        npm run build

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/flowstate/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Python code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Check Python code formatting (Black)
      working-directory: ./backend
      run: |
        black --check --diff .

    - name: Check Python imports (isort)
      working-directory: ./backend
      run: |
        isort --check-only --diff .

    - name: Lint Python code (flake8)
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Set up Node.js for frontend linting
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/flowstate/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./frontend/flowstate
      run: |
        npm ci --legacy-peer-deps

    - name: Check frontend code quality
      working-directory: ./frontend/flowstate
      run: |
        npm run lint

  # Security Checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check backend dependencies for vulnerabilities
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install safety
        safety check --json || true

    - name: Check frontend dependencies for vulnerabilities
      working-directory: ./frontend/flowstate
      run: |
        npm audit --audit-level moderate || true

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      working-directory: ./backend
      run: |
        docker build -t flowstate-backend:test .

    - name: Test backend Docker image
      run: |
        docker run --rm -d --name test-backend -p 8000:8000 flowstate-backend:test
        sleep 10
        # Simple health check
        curl -f http://localhost:8000/ || echo "Backend container started but health check failed"
        docker stop test-backend

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend/flowstate && npm ci --legacy-peer-deps

    - name: Start backend server
      working-directory: ./backend
      env:
        ENV: test
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key
      run: |
        python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Test API connectivity
      run: |
        curl -f http://localhost:8000/ || echo "API health check failed"

    - name: Run frontend connection tests
      working-directory: ./frontend/flowstate
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_LANGGRAPH_API_URL: http://localhost:9876
      run: |
        node src/tests/langgraph-connection-test.js || echo "LangGraph connection test completed"