name: Frontend Tests

on:
  push:
    branches: [ main, develop, PR-Testing ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'

# Ensure only one workflow per branch runs at a time
concurrency:
  group: frontend-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']
    
    defaults:
      run:
        working-directory: ./frontend/flowstate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/flowstate/package-lock.json

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: frontend/flowstate/node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('frontend/flowstate/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit

    - name: Type checking with TypeScript
      run: |
        npx tsc --noEmit --incremental false
        echo "‚úÖ TypeScript compilation successful"

    - name: Lint with ESLint
      run: |
        npm run lint
        echo "‚úÖ ESLint checks passed"

    - name: Format check with Prettier
      run: |
        npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
        echo "‚úÖ Code formatting is consistent"

    - name: Run unit tests
      run: |
        npm test -- --coverage --watchAll=false --passWithNoTests
        echo "‚úÖ Unit tests completed"

    - name: Build application
      run: |
        npm run build
        echo "‚úÖ Next.js build successful"

    - name: Check bundle size
      run: |
        # Analyze bundle size and fail if it's too large
        BUNDLE_SIZE=$(du -sb .next | cut -f1)
        MAX_SIZE=52428800  # 50MB in bytes
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "‚ùå Bundle size ($BUNDLE_SIZE bytes) exceeds maximum ($MAX_SIZE bytes)"
          exit 1
        fi
        echo "‚úÖ Bundle size is acceptable: $(($BUNDLE_SIZE / 1024 / 1024))MB"

    - name: Test application startup
      run: |
        # Start the application and test if it responds
        timeout 30s npm start &
        APP_PID=$!
        sleep 10
        
        # Test if the app is responding
        if curl -f http://localhost:3000 >/dev/null 2>&1; then
          echo "‚úÖ Application starts successfully"
        else
          echo "‚ùå Application failed to start properly"
          exit 1
        fi
        
        # Clean up
        kill $APP_PID || true

    - name: Security audit
      run: |
        npm audit --audit-level=high
        echo "‚úÖ No high-severity security vulnerabilities found"

    - name: Check for outdated dependencies
      run: |
        npm outdated || true
        echo "‚úÖ Dependency check completed"

    - name: Upload test coverage
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v4
      with:
        directory: ./frontend/flowstate/coverage
        flags: frontend
        name: frontend-coverage

    - name: Upload build artifacts
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: next-build-${{ github.sha }}
        path: |
          frontend/flowstate/.next
          !frontend/flowstate/.next/cache
        retention-days: 7

  # Additional job for component testing (if needed later)
  component-tests:
    runs-on: ubuntu-latest
    needs: frontend-tests
    if: github.event_name == 'pull_request'
    
    defaults:
      run:
        working-directory: ./frontend/flowstate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/flowstate/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run component tests
      run: |
        # Run any specific component tests
        npm test -- --testPathPattern=components --watchAll=false
        echo "‚úÖ Component tests completed"

    - name: Visual regression tests (placeholder)
      run: |
        echo "üì∏ Visual regression tests would run here"
        echo "‚úÖ Visual tests completed"